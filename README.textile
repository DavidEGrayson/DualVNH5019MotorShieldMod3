h1. Arduino library for the running two Pololu Dual VNH5019 Motor Driver Shields on an Arduino Mega

Version: 1.2.4.dualsheilds
Release Date: 2015-04-18
"www.pololu.com":http://www.pololu.com/

h2. Summary

This is a custom library for the "Arduino":http://www.pololu.com/catalog/product/2191 that interfaces with two Pololu "Dual VNH5019 Motor Driver Shields":http://www.pololu.com/catalog/product/2507 with an Arduino Mega. It makes it simple to drive four brushed, DC motors from 2 sheilds on a Mega.

h2. Getting Started

h3. Software

Download the archive from "GitHub":https://github.com/photodude/DualVNH5019MotorShieldMod3, decompress it, and move the "DualVNH5019MotorShieldMod3" folder into the "libraries" subdirectory inside your Arduino sketchbook directory. You can view your sketchbook location by selecting File->Preferences in the Arduino environment; if there is not already a "libraries" folder in that location, you should create it yourself. After installing the library, restart the Arduino environment so it can find the DualVNH5019MotorShieldMod3 library and its examples.

h3. Hardware

The Dual VNH5019 Motor Driver Shield can be purchased on "Pololu's website":http://www.pololu.com/catalog/product/2507. See the "motor shield user's guide":http://www.pololu.com/docs/0J49 for more details.

h2. Example Program

h3. Demo

Open this example code sketch by selecting File->Examples->DualVNH5019MotorShieldMod3->Demo.

The demo ramps motor 1 from stopped to full speed forward, ramps down to full speed reverse, and back to stopped. Then, it does the same with the other motors. All motor current readings are sent over serial and can be seen with the serial monitor. If a fault is detected, a message is sent over serial.

h3. Test_Motors

Open this example code sketch by selecting File->Examples->DualVNH5019MotorShieldMod3->Test_Motors.

The Test_Motors ramps motor 1 from stopped to full speed forward, ramps down to full speed reverse, and back to stopped. Then, it does the same with the other motors. All motor current readings are sent over serial and can be seen with the serial monitor. If a fault is detected, a message is sent over serial.

h2. Library Reference

- @DualVNH5019MotorShieldMod3()@ := Default constructor, selects the default pins as connected by the motor shields.
- @DualVNH5019MotorShieldMod3(unsigned char INA3, unsigned char INB3, unsigned char EN3DIAG3, unsigned char CS3, unsigned char PWM3, unsigned char INA4, unsigned char INB4, unsigned char EN4DIAG4, unsigned char CS4, unsigned char PWM4)@ := Alternate constructor for shield connections remapped by user. default pins for motor shield 1, custom pins for motor shield 2
- @DualVNH5019MotorShieldMod3(unsigned char INA1, unsigned char INB1, unsigned char EN1DIAG1, unsigned char CS1, unsigned char INA2, unsigned char INB2, unsigned char EN2DIAG2, unsigned char CS2)@ := Alternate constructor for shield connections remapped by user. PWM1 and PWM2 cannot be remapped because the library assumes PWM is on timer1.
- @DualVNH5019MotorShieldMod3(unsigned char INA1, unsigned char INB1, unsigned char EN1DIAG1, unsigned char CS1, unsigned char INA2, unsigned char INB2, unsigned char EN2DIAG2, unsigned char CS2, unsigned char INA3, unsigned char INB3, unsigned char EN3DIAG3, unsigned char CS3, unsigned char INA4, unsigned char INB4, unsigned char EN4DIAG4, unsigned char CS4)@ := Alternate constructor for shield connections remapped by user, all custom pins setup (note: assumes PWM pins are not remapped)
- @DualVNH5019MotorShieldMod3(unsigned char INA1, unsigned char INB1, unsigned char EN1DIAG1, unsigned char CS1, unsigned char INA2, unsigned char INB2, unsigned char EN2DIAG2, unsigned char CS2, unsigned char INA3, unsigned char INB3, unsigned char EN3DIAG3, unsigned char CS3, unsigned char INA4, unsigned char INB4, unsigned char EN4DIAG4, unsigned char CS4, unsigned char PWM1, unsigned char PWM2, unsigned char PWM3, unsigned char PWM4)@ := Alternate constructor for shield connections remapped by user, all custom pins setup
- @void init()@ := Initialize pinModes and timers.

- @void setM1Speed(int speed)@ := Set speed and direction for motor 1. Speed should be between -400 and 400. 400 corresponds to motor current flowing from M1A to M1B. -400 corresponds to motor current flowing from M1B to M1A.  0 corresponds to full coast.
- @void setM2Speed(int speed)@ := Set speed and direction for motor 2. Speed should be between -400 and 400. 400 corresponds to motor current flowing from M2A to M2B. -400 corresponds to motor current flowing from M2B to M2A.  0 corresponds to full coast.
- @void setM3Speed(int speed)@ := Set speed and direction for motor 3. Speed should be between -400 and 400. 400 corresponds to motor current flowing from M3A to M3B. -400 corresponds to motor current flowing from M3B to M3A.  0 corresponds to full coast.
- @void setM4Speed(int speed)@ := Set speed and direction for motor 4. Speed should be between -400 and 400. 400 corresponds to motor current flowing from M4A to M4B. -400 corresponds to motor current flowing from M4B to M4A.  0 corresponds to full coast.
- @void setSpeeds(int m1Speed, int m2Speed, int m3Speed, int m4Speed)@ := Set speed and direction for motor 1, 2, 3, 4. 

- @void setM1Brake(int brake)@ := Set brake for motor 1. Brake should be between 0 and 400. 0 corresponds to full coast, and 400 corresponds to full brake.
- @void setM2Brake(int brake)@ := Set brake for motor 2. Brake should be between 0 and 400. 0 corresponds to full coast, and 400 corresponds to full brake.
- @void setM3Brake(int brake)@ := Set brake for motor 3. Brake should be between 0 and 400. 0 corresponds to full coast, and 400 corresponds to full brake.
- @void setM4Brake(int brake)@ := Set brake for motor 4. Brake should be between 0 and 400. 0 corresponds to full coast, and 400 corresponds to full brake.
- @void setBrakes(int m1Brake, int m2Brake, int m3Brake, int m4Brake)@ := Set brake for motor 1, 2,3 4.

- @unsigned int getM1CurrentMilliamps()@ := Returns current reading from motor 1 in milliamps.
- @unsigned int getM2CurrentMilliamps()@ := Returns current reading from motor 2 in milliamps.
- @unsigned int getM3CurrentMilliamps()@ := Returns current reading from motor 3 in milliamps.
- @unsigned int getM4CurrentMilliamps()@ := Returns current reading from motor 4 in milliamps.

- @unsigned char getM1Fault()@ := Returns 1 if there is a fault on motor driver 1, 0 if no fault.
- @unsigned char getM2Fault()@ := Returns 1 if there is a fault on motor driver 2, 0 if no fault.
- @unsigned char getM3Fault()@ := Returns 1 if there is a fault on motor driver 3, 0 if no fault.
- @unsigned char getM4Fault()@ := Returns 1 if there is a fault on motor driver 4, 0 if no fault.

h2. Version History

* 1.2.4.dualshields (2015-04-18): Fixed a bug that was introduced in 1.2.3.dualshields with incorrect defualt pin for M3
* 1.2.3.dualshields (2015-02-22): Custom library for running two DualVNH5019MotorShields on a Mega (4 motors total).
* 1.2.3 (2014-03-24): Added 20 kHz PWM support for ATmega32U4. Thanks blacksound.
* 1.2.2 (2014-03-18): Add keywords.txt file. Thanks eatonphil.
* 1.2.1 (2013-01-06): Fixed a bug in setM2Speed that was introduced in 1.2.0.
* 1.2.0 (2012-12-26): Changes the behavior of the library at speed 0 so that it makes the motor coast regardless of which direction the motor is spinning.
* 1.1.0 (2011-12-15): Arduino 1.0 compatibility.
* 1.0.1 (2011-11-07): Adds support for Arduinos not based on ATmega168/328.
* 1.0.0 (2011-10-28): Original release.
